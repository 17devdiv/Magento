name: üöÄ FTP Deploy
on: [push, workflow_dispatch]
jobs:
  ftp-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üõí Checkout
        uses: actions/checkout@v2
      - name: üì¶ Get LFTP
        run: sudo apt install lftp
      - name: üõ†Ô∏è Configure LFTP
        run: mkdir ~/.lftp && echo "set ssl:verify-certificate false;" >> ~/.lftp/rc
      - name: üîë Load Secrets
        run: echo "machine 192.168.4.28 login magento2divya password $PASSWORD " > ~/.netrc
      - name: üìÅ Upload Folder
        run: lftp -e "mirror --parallel=100 -R /home/runner/work/Magento/Magento/app/code/ /home/magento2divya/public_html/app/code" 192.168.4.28



# name: m2-actions-test
# on: [push]

# jobs:
#   magento2-build:
#     runs-on: ubuntu-latest
#     container: ubuntu
#     name: 'm2 unit tests & build'
#     services:
#       mysql:
#         image: docker://mysql:8.0
#         env:
#           MYSQL_ROOT_PASSWORD: magento
#           MYSQL_DATABASE: magento
#         ports:
#           - 3306:3306
#         options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#       elasticsearch:
#         image: docker://elasticsearch:7.1.0
#         ports:
#           - 9200:9200
#         options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10
#     steps:
#     - uses: actions/checkout@v1
#       with:
#         submodules: recursive
#     - name: 'this step starts static testing the code'
#       if: always()
#       uses: MAD-I-T/magento-actions@v3.7
#       env:
#         COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
#       with:
#         php: '7.4'
#         process: 'unit-test'
#         elasticsearch: 1
#     - name: 'this step will build an magento artifact'
#       uses: MAD-I-T/magento-actions@v3.7
#       env:
#         COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
#       with:
#         php: '7.4'
#         process: 'build'
#         elasticsearch: 1
    
#     - name: 'starts magento2 zero downtime deploy with no permission check'
#       if: success()
#       uses: MAD-I-T/magento-actions@v3.7
#       env:
#         COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
#         BUCKET_COMMIT: bucket-commit-${{github.sha}}.tar.gz
#         MYSQL_ROOT_PASSWORD: magento
#         MYSQL_DATABASE: magento
#         HOST_DEPLOY_PATH: ${{secrets.STAGE_HOST_DEPLOY_PATH}}
#         HOST_DEPLOY_PATH_BUCKET: ${{secrets.STAGE_HOST_DEPLOY_PATH}}/bucket
#         SSH_PRIVATE_KEY: ${{secrets.STAGE_SSH_PRIVATE_KEY}}
#         SSH_CONFIG: ${{secrets.STAGE_SSH_CONFIG}}
#         WRITE_USE_SUDO: false
#       with:
#         php: '7.4'
#         deployer: 'no-permission-check'
#         process: 'deploy-staging'

#     - name: 'unlock php deployer if the deployment fails'
#       if: failure() || cancelled()
#       uses: MAD-I-T/magento-actions@v3.7
#       env:
#         COMPOSER_AUTH: ${{secrets.COMPOSER_AUTH}}
#         BUCKET_COMMIT: bucket-commit-${{github.sha}}.tar.gz
#         MYSQL_ROOT_PASSWORD: magento
#         MYSQL_DATABASE: magento
#         HOST_DEPLOY_PATH: ${{secrets.STAGE_HOST_DEPLOY_PATH}}
#         HOST_DEPLOY_PATH_BUCKET: ${{secrets.STAGE_HOST_DEPLOY_PATH}}/bucket
#         SSH_PRIVATE_KEY: ${{secrets.STAGE_SSH_PRIVATE_KEY}}
#         SSH_CONFIG: ${{secrets.STAGE_SSH_CONFIG}}
#         WRITE_USE_SUDO: false
#       with:
#         php: '7.4'
#         process: 'cleanup-staging' 
