<?php

namespace Magenest\Salesforce\Controller\Adminhtml\Map;

use Magenest\Salesforce\Model\Map;
use Magenest\Salesforce\Model\ResourceModel\Map\Collection;
use Magento\Framework\Controller\Result\Json;
use Magento\Framework\Controller\ResultFactory;
use Magenest\Salesforce\Controller\Adminhtml\Map as MapController;

/**
 * Class SaveMapping
 * @package Magenest\Salesforce\Controller\Adminhtml\Map
 */
class SaveMapping extends MapController
{
    /**
     * @var array
     */
    protected $mappingItems;

    protected function _construct()
    {
        $collection = $this->_collectionFactory->create()->getItems();
        $items      = [];
        if(count($collection) > 0){
            foreach ($collection as $map) {
                $type = $map->getType();
                if (!isset($items[$type])) {
                    $items[$type] = [];
                }
                $items[$type][$map->getMagento()] = $map;
            }
        }
        $this->mappingItems = $items;
        parent::_construct(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \Magento\Framework\App\ResponseInterface|\Magento\Framework\Controller\ResultInterface
     * @throws \Exception
     */
    public function execute()
    {
        /** @var Json $controllerResult */
        $controllerResult = $this->resultFactory->create(ResultFactory::TYPE_JSON);
        try{
            if ($this->getRequest()->isAjax()) {
                $data = $this->getRequest()->getPostValue();
                if (isset($data['type']) && isset($data['result'])) {
                    $results       = $data['result'];
                    $type          = $data['type'];
                    $rowUpdatedIds = [];
                    foreach ($results as $result) {
                        /** @var Map $curRow */
                        $curRow = $this->getMappingItem($type, $result['key']);
                        $curRow->setSalesforce($result['value']);
                        $curRow->setMagento($result['key']);
                        $curRow->setDescription($result['description']);
                        $curRow->setStatus($result['status']);

                        if (!$curRow->getId()) {
                            $curRow->setType($type);
                        }
                        $this->_mapResource->save($curRow);
                        $rowUpdatedIds[] = $curRow->getId();
                    }
                    $this->removeRowMapping($type, $rowUpdatedIds);
                    $controllerResult->setData(true);
                } else {
                    return $controllerResult;
                }
            }else{
                throw new \Exception(__('Save mapping is wrong!'));
            }
        }catch (\Exception $exception){
            $this->_logger->critical($exception->getMessage());
        }


        return $this->_redirect('*/*/newmapping');
    }

    /**
     * @param $type
     * @param $rowIds
     *
     * @throws \Exception
     */
    public function removeRowMapping($type, $rowIds)
    {
        try{
            /** @var Collection $mapCollection */
            $mapCollection = $this->_collectionFactory->create()->addTypeFilter($type)->addIdsFilter($rowIds, 'nin');
            /** @var \Magenest\Salesforce\Model\Map $item */
            foreach ($mapCollection->getItems() as $item) {
                $this->_mapResource->delete($item);
            }
        }catch (\Exception $exception){
            $this->_logger->critical($exception->getMessage());
        }
    }

    /**
     * @return array
     */
    protected function getMappingItems()
    {
        return $this->mappingItems;
    }

    /**
     * @param string $type
     * @param string $field
     * @return Map
     */
    protected function getMappingItem($type, $field)
    {
        $items = $this->getMappingItems();
        return isset($items[$type][$field]) ? $items[$type][$field] : $this->_mapFactory->create();
    }
}